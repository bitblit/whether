{
  "name": "backbone-dynamodb",
  "author": {
    "name": "Sergio Alcantara",
    "email": "iserg9@gmail.com",
    "url": "https://github.com/serg-io"
  },
  "description": "Backbone.js sync for DynamoDB",
  "version": "0.2.0",
  "homepage": "https://github.com/serg-io/backbone-dynamodb",
  "keywords": [
    "backbone",
    "dynamodb",
    "dyndb",
    "aws",
    "amazon"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/serg-io/backbone-dynamodb.git"
  },
  "main": "backbone-dynamodb.js",
  "dependencies": {
    "dyndb": "0.2.0",
    "underscore": "1.4.4",
    "backbone": "1.0.0",
    "node-uuid": "1.4.0"
  },
  "readme": "backbone-dynamodb\n=================\n\nServer side Backbone.js sync implementation for DynamoDB.\n\nInstallation\n------------\n\nExecute the following command at the root of your project:\n\n\tnpm install backbone-dynamodb\n\nAWS Credentials\n---------------\n\nYou can set the AWS credentials and region using any of the following methods:\n\n1.\tManually:\n\t\n\t\tBackbone.DynamoDB.setup('accessKeyID', 'secretAccessKey', 'awsRegion');\n\n2.\tSetting the following environment variables. There's no need to call the `setup()` method, it would get those\n\tvalues automatically:\n\t* `AWS_ACCESS_KEY_ID`\n\t* `AWS_SECRET_ACCESS_KEY`\n\t* `AWS_REGION`\n\n3.\tUsing an IAM Role. To use IAM Role credentials just [assign a role to the EC2](http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/UsingIAM.html#UsingIAMrolesWithAmazonEC2Instances) instance when you launch it.\n\tbackbone-dynamodb will automatically get the credentials from the [EC2 metadata service](http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html).\n\tThere's no need to call the `setup()` method, it would get those values automatically, however, if you don't want\n\tto use the default AWS region (`us-east-1`), you can call the `setup()` method to specify the region you want to use,\n\tjust set the first two arguments to `null`:\n\n\t\tBackbone.DynamoDB.setup(null, null, 'us-west-1');\n\n\n\n`Backbone.DynamoDB.Model`\n-------------------------\n\n### The `id` attribute\n\nIf the a `model` is new (`isNew()`), meaning that an `id` has not been assigned, an UUID string value is generated and set as the `id` when calling the `save()` method.\n\n### `extend(options)`\n\n* `idAttribute`: Specifies the name of the attribute that is the `HashKeyElement`. The default value is `id`.\n* `rangeAttribute`: Specifies the name of the attribute that is the `RangeKeyElement`. Only needed if the table has a `RangeKeyElement`.\n* `tableName`: The name of the table to use.\n* `urlRoot`: If no `tableName` is given, the value of `urlRoot` is used to determine the name of the table. First, the `'/'` at the beginning, if any, is removed, then the first character is switched to upper case. For instance: if `urlRoot` is `'/users'`, the table name is `'Users'`\n\n`Backbone.DynamoDB.Collection`\n-------------------------\n\n### `extend(options)`\n\n* `tableName`: The name of the table to use.\n* `url`: If no `tableName` is given, the value of `url` is used to determine the name of the table. First, the `'/'` at the beginning, if any, is removed, then the first character is switched to upper case. For instance: if `url` is `'/users'`, the table name is `'Users'`\n\n### `fetch(options)`\n\nWhen fetching a collection you can use a DynamoDB [Query](http://docs.amazonwebservices.com/amazondynamodb/latest/developerguide/API_Query.html) or [Scan](http://docs.amazonwebservices.com/amazondynamodb/latest/developerguide/API_Scan.html) operation. To use a Query operation set the body of the DynamoDB request in `options.query`. To use a Scan operation set the body of the DynamoDB request in `options.scan`. You don't need to set the `TableName` in either one, it is automatically added to the request body.\n\n\n`save`, `destroy`, `fetch`, and their callbacks\n-----------------------------------------------\n\nThe following applies to both `Backbone.DynamoDB.Model` and `Backbone.DynamoDB.Collection`\n\n### `options.dynamodb`\n\nWhen calling `save(attributes, options)`, `destroy(options)`, or `fetch(options)` the DynamoDB request body is automatically generated. You can extend the request body using the `options.dynamodb`. For instance, you can set the DynamoDB `ConsistentRead` option:\n\n\tmodel.fetch({\n\t\tdynamodb: {\n\t\t\tConsistentRead: true\n\t\t}\n\t\t// Other options here\n\t});\n\n### DynamoDB Response\n\nThe DynamoDB response is provided to the `success(model, response)`, `error(model, response)`, and `complete(model, response)` callbacks in `response.dynamodb`.\n\n### `options.context`\n\nSimilar to the `context` setting in [jQuery.ajax](http://api.jquery.com/jQuery.ajax/#jQuery-ajax-settings), setting the `options.context` when calling `save(attributes, options)`, `destroy(options)`, or `fetch(options)`, will make all callback functions to be called within the given context. In other words, the value of `this`, within the callbacks, will be the given `options.context`.\n\n#### `complete(model, response)`\n\nThe `options.complete` callback, if specified, is called after either `options.success` or `options.error` has been called.\n\nExamples\n--------\n\n\tvar Backbone = require('backbone-dynamodb');\n\tvar fs = require('fs');\n\n\tvar Book = Backbone.DynamoDB.Model.extend({\n\t\tidAttribute: 'isbn', // The HashKeyElement\n\t\turlRoot: '/books' // Table name: 'Books'\n\t});\n\tvar Books = Backbone.DynamoDB.Collection.extend({\n\t\tmodel: Book,\n\t\turl: '/books'\n\t});\n\n\tvar Comment = Backbone.DynamoDB.Model.extend({\n\t\tidAttribute: 'isbn', // The HashKeyElement\n\t\trangeAttribute: 'date', // The RangeKeyElement\n\t\ttableName: 'BookComments', // Table name: 'BookComments'\n\t\turlRoot: '/bookcomments'\n\t});\n\tvar Comments = Backbone.DynamoDB.Collection.extend({\n\t\tmodel: Comment,\n\t\ttableName: 'BookComments', // Table name: 'BookComments'\n\t\turl: '/bookcomments'\n\t});\n\n\tvar book1 = new Book({\n\t\tisbn: 9780641723445,\n\t\tcategory: ['book','hardcover'],\n\t\ttitle: 'The Lightning Thief',\n\t\tauthor: 'Rick Riordan',\n\t\tgenre: 'fantasy',\n\t\tinStock: true,\n\t\tprice: 12.50,\n\t\tpages: 384,\n\t\tpublishedDate: new Date(2012, 0, 1) // Date instances are converted into ISO8601 date strings\n\t});\n\tbook1.save({}, {\n\t\t// The original DynamoDB response is available in response.dynamodb\n\t\tsuccess: function(book, response) {\n\t\t\t// response.dynamodb would be something like: {ConsumedCapacityUnits: 1}\n\t\t},\n\t\terror: function(book, response) {},\n\t\tcomplete: function(book, response) {}\n\t});\n\n\tvar book2 = new Book({isbn: 9781857995879});\n\tbook2.fetch({\n\t\tdynamodb: {\n\t\t\tConsistentRead: true\n\t\t},\n\t\tsuccess: function(book, response) {\n\t\t\t// Do something here\n\t\t},\n\t\terror: function(book, response) {\n\t\t\t// response = {code: 'NotFound'} if the book was not found\n\t\t}\n\t});\n\n\tvar lastYearBooks = new Books();\n\t// fetch all books published in 2011\n\tlastYearBooks.fetch({\n\t\tscan: { // Use a DynamoDB 'Scan' operation\n\t\t\t// No need to specify TableName\n\t\t\tScanFilter: {\n\t\t\t\tpublishedDate: {\n\t\t\t\t\tAttributeValueList: [\n\t\t\t\t\t\t{S: new Date(2011, 0, 1)},\n\t\t\t\t\t\t{S: new Date(2011, 11, 31)}\n\t\t\t\t\t],\n\t\t\t\t\tComparisonOperator: 'BETWEEN'\n\t\t\t\t}\n\t\t\t},\n\t\t\tLimit: 100\n\t\t},\n\t\tsuccess: function(books, response) {},\n\t\terror: function(books, response) {}\n\t});\n\n\tvar comments = new Comments();\n\t// Fetch all comments posted after January 31th for the book with ISBN: 9781857995879\n\tcomments.fetch({\n\t\tquery: { // Use a DynamoDB 'Query' operation\n\t\t\t// No need to specify TableName\n\t\t\tHashKeyValue: {N: '9781857995879'},\n\t\t\tRangeKeyCondition: {\n\t\t\t\tAttributeValueList: [{S: new Date(2012, 0, 31)}],\n\t\t\t\tComparisonOperator: 'GT'\n\t\t\t},\n\t\t\tConsistentRead: true\n\t\t},\n\t\tsuccess: function(comments, response) {},\n\t\terror: function(comments, response) {}\n\t});\n\n\n\t// Use a `Buffer` instance to store binary data\n\tfs.readFile(__dirname + '/cover.png', function(error, data) { // data is an instance of `Buffer`\n\t\tnew Book({\n\t\t\tisbn: 9781933988177,\n\t\t\tcat: ['book','paperback'],\n\t\t\tname: 'Lucene in Action, Second Edition',\n\t\t\tauthor: 'Michael McCandless',\n\t\t\tsequence_i: 1,\n\t\t\tgenre_s: 'IT',\n\t\t\tinStock: true,\n\t\t\tprice: 30.50,\n\t\t\tpages_i: 475,\n\t\t\tpublished_date: new Date(2012, 0, 4),\n\t\t\tcoverImage: data\n\t\t}).save({}, {\n\t\t\tsuccess: function(book, response) {},\n\t\t\terror: function(book, response) {},\n\t\t\tcomplete: function(book, response) {}\n\t\t});\n\t\t// Note: Binary sets are also supported. Just set an attribute's value to an array of `Buffer` instances.\n\t});",
  "readmeFilename": "README.md",
  "_id": "backbone-dynamodb@0.2.0",
  "dist": {
    "shasum": "5799703e838394d57d3f6c0d374baa6ccc6fef4a"
  },
  "_from": "backbone-dynamodb@*",
  "_resolved": "https://registry.npmjs.org/backbone-dynamodb/-/backbone-dynamodb-0.2.0.tgz"
}
